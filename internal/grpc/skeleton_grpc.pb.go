// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/grpc/skeleton.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroSkeletonClient is the client API for MicroSkeleton service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroSkeletonClient interface {
	CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
	GetItem(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*Item, error)
}

type microSkeletonClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroSkeletonClient(cc grpc.ClientConnInterface) MicroSkeletonClient {
	return &microSkeletonClient{cc}
}

func (c *microSkeletonClient) CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/microskeleton.MicroSkeleton/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microSkeletonClient) GetItem(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/microskeleton.MicroSkeleton/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroSkeletonServer is the server API for MicroSkeleton service.
// All implementations must embed UnimplementedMicroSkeletonServer
// for forward compatibility
type MicroSkeletonServer interface {
	CreateItem(context.Context, *Item) (*Item, error)
	GetItem(context.Context, *ItemID) (*Item, error)
	mustEmbedUnimplementedMicroSkeletonServer()
}

// UnimplementedMicroSkeletonServer must be embedded to have forward compatible implementations.
type UnimplementedMicroSkeletonServer struct {
}

func (UnimplementedMicroSkeletonServer) CreateItem(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedMicroSkeletonServer) GetItem(context.Context, *ItemID) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedMicroSkeletonServer) mustEmbedUnimplementedMicroSkeletonServer() {}

// UnsafeMicroSkeletonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroSkeletonServer will
// result in compilation errors.
type UnsafeMicroSkeletonServer interface {
	mustEmbedUnimplementedMicroSkeletonServer()
}

func RegisterMicroSkeletonServer(s grpc.ServiceRegistrar, srv MicroSkeletonServer) {
	s.RegisterService(&MicroSkeleton_ServiceDesc, srv)
}

func _MicroSkeleton_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroSkeletonServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microskeleton.MicroSkeleton/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroSkeletonServer).CreateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroSkeleton_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroSkeletonServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microskeleton.MicroSkeleton/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroSkeletonServer).GetItem(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroSkeleton_ServiceDesc is the grpc.ServiceDesc for MicroSkeleton service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroSkeleton_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microskeleton.MicroSkeleton",
	HandlerType: (*MicroSkeletonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _MicroSkeleton_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _MicroSkeleton_GetItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/skeleton.proto",
}
